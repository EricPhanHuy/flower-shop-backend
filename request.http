### FlowerShop API Test Requests

# Base URL - Update this to match your Django server
@baseUrl = http://localhost:8000
@authToken = 94c3165a0730227f226e8a2ba658c82f3573d5e7
@otherUserToken = 1234567890

### User Auth Endpoints ###

# Register a new user
POST {{baseUrl}}/api/auth/register/
Content-Type: application/json

{
    "username": "ngtuankhanh",
    "password": "Ecommerce123"
}
###

# Get auth token
POST {{baseUrl}}/api/auth/get-auth-token/
Content-Type: application/json

{
    "username": "ngtuankhanh",
    "password": "Ecommerce123"
}
###
# Get auth token
POST {{baseUrl}}/api/auth/admin/
Content-Type: application/json

{
    "username": "admin",
    "password": "florashop123"
}
### Product Types Endpoints ###

# Get all product types
GET {{baseUrl}}/api/products/types/

###

### Occasions Endpoints ###

# Get all occasions
GET {{baseUrl}}/api/products/occasions/

###

### Products Endpoints ###

# Get all products
GET {{baseUrl}}/api/products/products/?page=2

###

# Get featured products
GET {{baseUrl}}/api/products/products/featured/

###

# Get fresh products
GET {{baseUrl}}/api/products/products/fresh/

###

# Get all products
GET {{baseUrl}}/api/products/products/20/

###

# Filter products by type
GET {{baseUrl}}/api/products/products/?type__name=Bouquets

###

# Filter products by occasion
GET {{baseUrl}}/api/products/products/?occasion__name=Valentine's Day

###

# Filter products by price range
GET {{baseUrl}}/api/products/products/?price__lt=100&price__gt=50

###

# Filter products by condition
GET {{baseUrl}}/api/products/products/?condition=fresh

###

# Search products by name (case-insensitive)
GET {{baseUrl}}/api/products/products/?name__icontains=rose

###

# Filter by multiple criteria
GET {{baseUrl}}/api/products/products/?type__name=Bouquets&price__lt=100&condition=fresh

###

### Error Testing ###

# Test invalid product type filter
GET {{baseUrl}}/api/products/products/?type__name=InvalidType

###

# Test invalid price range
GET {{baseUrl}}/api/products/products/?price__lt=abc

###

### Health Check ###

# Check if server is running
GET {{baseUrl}}/admin/

###

### CartItem Endpoints ###

# Get all cart items for the authenticated user
GET {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}

###

# Add item to cart
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 1,
    "quantity": 2
}

###

# Get specific cart item
GET {{baseUrl}}/api/cart-items/2/
Authorization: Token {{authToken}}

###

# Update cart item quantity
PUT {{baseUrl}}/api/cart-items/2/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 1,
    "quantity": 5
}

###

# Partially update cart item (PATCH)
PATCH {{baseUrl}}/api/cart-items/2/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "quantity": 2
}

###

# Delete cart item
DELETE {{baseUrl}}/api/cart-items/3/
Authorization: Token {{authToken}}

###

# Add multiple items to cart
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 2,
    "quantity": 1
}

###

# Add another item to cart
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 3,
    "quantity": 2
}

###

### CartItem Error Testing ###

# Test adding item without authentication
POST {{baseUrl}}/api/cart-items/
Content-Type: application/json

{
    "product_id": 1,
    "quantity": 2
}

###

# Test adding item with invalid product_id
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 999,
    "quantity": 2
}

###

# Test adding item with negative quantity
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 1,
    "quantity": -1
}

###

# Test adding item with zero quantity
POST {{baseUrl}}/api/cart-items/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 1,
    "quantity": 0
}

###

# Test updating non-existent cart item
PUT {{baseUrl}}/api/cart-items/999/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "product_id": 1,
    "quantity": 3
}

###

# Test accessing cart items without authentication
GET {{baseUrl}}/api/cart-items/

###

### Order Endpoints ###

# Get all orders for the authenticated user
GET {{baseUrl}}/api/orders/
Authorization: Token {{authToken}}

###

# Create a new order from cart items
POST {{baseUrl}}/api/orders/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "note": "Please deliver in the morning"
}

###

# Get all orders for another user (should be empty or forbidden)
GET {{baseUrl}}/api/orders/
Authorization: Token {{otherUserToken}}

###

# Update order status to shipping
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "shipping"
}

###

# Update order status to completed
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "completed"
}

###

# Update order status to cancelled
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "cancelled"
}

###

# Update order status back to processing
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "processing"
}

###

### Order Error Testing ###

# Test creating order without authentication
POST {{baseUrl}}/api/orders/
Content-Type: application/json

{
    "note": "Please deliver in the morning"
}

###

# Test creating order with empty cart
POST {{baseUrl}}/api/orders/
Authorization: Token {{otherUserToken}}
Content-Type: application/json

{
    "note": "Please deliver in the morning"
}

###

# Test updating non-existent order
PATCH {{baseUrl}}/api/orders/999/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "shipping"
}

###

# Test updating order with invalid status
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "status": "invalid_status"
}

###

# Test updating order without authentication
PATCH {{baseUrl}}/api/orders/1/update_status/
Content-Type: application/json

{
    "status": "shipping"
}

###

# Test accessing orders without authentication
GET {{baseUrl}}/api/orders/

###

# Test updating another user's order (should fail)
PATCH {{baseUrl}}/api/orders/1/update_status/
Authorization: Token {{otherUserToken}}
Content-Type: application/json

{
    "status": "shipping"
}


### Pricing Rules Endpoints ###

# Get all time pricing rules
GET {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}

###

# Get specific pricing rule
GET {{baseUrl}}/api/pricing-rules/time-pricing-rules/1/
Authorization: Token {{authToken}}

###

# Create a new pricing rule
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "15.50"
}

###

# Update pricing rule
PUT {{baseUrl}}/api/pricing-rules/time-pricing-rules/1/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "20.00"
}

###

# Partially update pricing rule
PATCH {{baseUrl}}/api/pricing-rules/time-pricing-rules/1/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "time_discount": "25.50"
}

###

# Delete pricing rule
DELETE {{baseUrl}}/api/pricing-rules/time-pricing-rules/1/
Authorization: Token {{authToken}}

###

### Pricing Rules Error Testing ###

# Test accessing pricing rules without authentication
GET {{baseUrl}}/api/pricing-rules/time-pricing-rules/

###

# Test creating pricing rule without authentication
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "15.50"
}

###

# Test creating pricing rule with invalid discount (negative)
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "-10.00"
}

###

# Test creating pricing rule with invalid discount (too high)
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "150.00"
}

###

# Test creating pricing rule with invalid date range (end before start)
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-26T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "15.50"
}

###

# Test updating non-existent pricing rule
PUT {{baseUrl}}/api/pricing-rules/time-pricing-rules/999/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-25T00:00:00Z",
    "end_time": "2024-12-25T23:59:59Z",
    "time_discount": "20.00"
}

###

# Test deleting non-existent pricing rule
DELETE {{baseUrl}}/api/pricing-rules/time-pricing-rules/999/
Authorization: Token {{authToken}}

###

# Test creating multiple pricing rules
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2024-12-31T00:00:00Z",
    "end_time": "2024-12-31T23:59:59Z",
    "time_discount": "10.00"
}

###

# Test creating another pricing rule
POST {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}
Content-Type: application/json

{
    "start_time": "2025-01-01T00:00:00Z",
    "end_time": "2025-01-01T23:59:59Z",
    "time_discount": "5.00"
}

###

# Test getting all pricing rules (should show multiple)
GET {{baseUrl}}/api/pricing-rules/time-pricing-rules/
Authorization: Token {{authToken}}

###

###
